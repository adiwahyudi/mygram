// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	model "mygram/model"

	mock "github.com/stretchr/testify/mock"
)

// ISocialMediaRepository is an autogenerated mock type for the ISocialMediaRepository type
type ISocialMediaRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *ISocialMediaRepository) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields:
func (_m *ISocialMediaRepository) Get() ([]model.SocialMedia, error) {
	ret := _m.Called()

	var r0 []model.SocialMedia
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.SocialMedia, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.SocialMedia); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.SocialMedia)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOne provides a mock function with given fields: id
func (_m *ISocialMediaRepository) GetOne(id string) (model.SocialMedia, error) {
	ret := _m.Called(id)

	var r0 model.SocialMedia
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (model.SocialMedia, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) model.SocialMedia); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.SocialMedia)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: socialMedia
func (_m *ISocialMediaRepository) Save(socialMedia model.SocialMedia) (model.SocialMedia, error) {
	ret := _m.Called(socialMedia)

	var r0 model.SocialMedia
	var r1 error
	if rf, ok := ret.Get(0).(func(model.SocialMedia) (model.SocialMedia, error)); ok {
		return rf(socialMedia)
	}
	if rf, ok := ret.Get(0).(func(model.SocialMedia) model.SocialMedia); ok {
		r0 = rf(socialMedia)
	} else {
		r0 = ret.Get(0).(model.SocialMedia)
	}

	if rf, ok := ret.Get(1).(func(model.SocialMedia) error); ok {
		r1 = rf(socialMedia)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: updateSocialMedia, id
func (_m *ISocialMediaRepository) Update(updateSocialMedia model.SocialMedia, id string) (model.SocialMedia, error) {
	ret := _m.Called(updateSocialMedia, id)

	var r0 model.SocialMedia
	var r1 error
	if rf, ok := ret.Get(0).(func(model.SocialMedia, string) (model.SocialMedia, error)); ok {
		return rf(updateSocialMedia, id)
	}
	if rf, ok := ret.Get(0).(func(model.SocialMedia, string) model.SocialMedia); ok {
		r0 = rf(updateSocialMedia, id)
	} else {
		r0 = ret.Get(0).(model.SocialMedia)
	}

	if rf, ok := ret.Get(1).(func(model.SocialMedia, string) error); ok {
		r1 = rf(updateSocialMedia, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewISocialMediaRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewISocialMediaRepository creates a new instance of ISocialMediaRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewISocialMediaRepository(t mockConstructorTestingTNewISocialMediaRepository) *ISocialMediaRepository {
	mock := &ISocialMediaRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
