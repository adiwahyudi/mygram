// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	model "mygram/model"

	mock "github.com/stretchr/testify/mock"
)

// IUserRepository is an autogenerated mock type for the IUserRepository type
type IUserRepository struct {
	mock.Mock
}

// GetByUsername provides a mock function with given fields: username
func (_m *IUserRepository) GetByUsername(username string) (model.User, error) {
	ret := _m.Called(username)

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (model.User, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) model.User); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDetailUser provides a mock function with given fields: id
func (_m *IUserRepository) GetDetailUser(id string) (model.User, error) {
	ret := _m.Called(id)

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (model.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) model.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: newUser
func (_m *IUserRepository) Save(newUser model.User) (model.User, error) {
	ret := _m.Called(newUser)

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(model.User) (model.User, error)); ok {
		return rf(newUser)
	}
	if rf, ok := ret.Get(0).(func(model.User) model.User); ok {
		r0 = rf(newUser)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(model.User) error); ok {
		r1 = rf(newUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIUserRepository creates a new instance of IUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIUserRepository(t mockConstructorTestingTNewIUserRepository) *IUserRepository {
	mock := &IUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
