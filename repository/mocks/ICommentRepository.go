// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	model "mygram/model"

	mock "github.com/stretchr/testify/mock"
)

// ICommentRepository is an autogenerated mock type for the ICommentRepository type
type ICommentRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *ICommentRepository) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields:
func (_m *ICommentRepository) Get() ([]model.Comment, error) {
	ret := _m.Called()

	var r0 []model.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.Comment, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Comment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOne provides a mock function with given fields: id
func (_m *ICommentRepository) GetOne(id string) (model.Comment, error) {
	ret := _m.Called(id)

	var r0 model.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (model.Comment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) model.Comment); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Comment)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: comment
func (_m *ICommentRepository) Save(comment model.Comment) (model.Comment, error) {
	ret := _m.Called(comment)

	var r0 model.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Comment) (model.Comment, error)); ok {
		return rf(comment)
	}
	if rf, ok := ret.Get(0).(func(model.Comment) model.Comment); ok {
		r0 = rf(comment)
	} else {
		r0 = ret.Get(0).(model.Comment)
	}

	if rf, ok := ret.Get(1).(func(model.Comment) error); ok {
		r1 = rf(comment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: updateComment, id
func (_m *ICommentRepository) Update(updateComment model.Comment, id string) (model.Comment, error) {
	ret := _m.Called(updateComment, id)

	var r0 model.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Comment, string) (model.Comment, error)); ok {
		return rf(updateComment, id)
	}
	if rf, ok := ret.Get(0).(func(model.Comment, string) model.Comment); ok {
		r0 = rf(updateComment, id)
	} else {
		r0 = ret.Get(0).(model.Comment)
	}

	if rf, ok := ret.Get(1).(func(model.Comment, string) error); ok {
		r1 = rf(updateComment, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewICommentRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewICommentRepository creates a new instance of ICommentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewICommentRepository(t mockConstructorTestingTNewICommentRepository) *ICommentRepository {
	mock := &ICommentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
